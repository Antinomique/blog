<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on THALIUM</title>
    <link>https://thalium.github.io/blog/posts/</link>
    <description>Recent content in Posts on THALIUM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2020, all rights reserved.</copyright>
    <lastBuildDate>Mon, 22 Jun 2020 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://thalium.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windows Memory Introspection with IceBox</title>
      <link>https://thalium.github.io/blog/posts/windows-full-memory-introspection-with-icebox/</link>
      <pubDate>Mon, 22 Jun 2020 12:00:00 +0100</pubDate>
      
      <guid>https://thalium.github.io/blog/posts/windows-full-memory-introspection-with-icebox/</guid>
      <description>Virtual Machine Introspection (VMI) is an extremely powerful technique to explore a guest OS. Directly acting on the hypervisor allows a stealth and precise control of the guest state, which means its CPU context as well as its memory.
Basically, a common use case in VMI consists in (1) setting a breakpoint on an address, (2) wait for a break and (3) finally read some virtual memory. For example, to simply monitor the user file writing activity on Windows, just set a breakpoint on the NtWriteFile function in kernel land.</description>
    </item>
    
    <item>
      <title>Getting Started with Icebox VMI</title>
      <link>https://thalium.github.io/blog/posts/getting_started/</link>
      <pubDate>Fri, 24 Jan 2020 12:00:00 +0100</pubDate>
      
      <guid>https://thalium.github.io/blog/posts/getting_started/</guid>
      <description>Icebox is a VMI (Virtual Machine Introspection) framework enabling you to stealthily trace and debug any kernel or user code system-wide.
All Icebox source code can be found on our github page.
Try Icebox Icebox now comes with full Python bindings enabling fast prototyping on top of VMI, whether you want to trace a user process or inspect the kernel internals.
The core itself is in C++ and exposes most of its public functions into an icebox Python 3 module.</description>
    </item>
    
  </channel>
</rss>